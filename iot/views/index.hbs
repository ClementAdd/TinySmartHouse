<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Style pour les encadrés */
        body, html {
            height: 100%;
            margin: 0;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .side-boxes {
            display: flex;
            flex-direction: column;
            width: 200px;
            padding: 20px;
            text-align: center;
        }

        .box {
            width: 100%;
            border: 2px solid #ccc;
            border-radius: 15px;
            margin-bottom: 20px;

        }

        /* Style pour l'encadré principal */
        #boxMain {
            flex: 1;
            padding: 20px;
            border: 2px solid #ccc;
            border-radius: 15px;
            text-align: center;
            margin-right: 20px;
            margin-top: 20px;
        }

        /* Style pour les boutons */
        .btn {
            display: block;
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            border: none;
            border-radius: 14px;
            cursor: pointer;
        }

        /* Couleur du bouton en fonction de l'état */
        .open {
            background-color: #4CAF50;
            color: white;
        }

        .closed {
            background-color: #f44336;
            color: white;
        }

        .variable-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(48%, 1fr));
            gap: 10px;
        }

        .variable-box {
            padding: 10px;
            border: 2px solid #ccc;
            border-radius: 15px;
            text-align: center;
        }

        #snackbar {
            visibility: hidden;
            min-width: 250px;
            margin-left: -125px;
            background-color: #dc3737;
            color: #fff;
            text-align: center;
            border-radius: 2px;
            padding: 16px;
            position: fixed;
            z-index: 1;
            left: 50%;
            bottom: 30px;
        }

        /* Show the snackbar when clicking on a button (class added with JavaScript) */
        #snackbar.show {
            visibility: visible; /* Show the snackbar */
            /* Add animation: Take 0.5 seconds to fade in and out the snackbar.
            However, delay the fade out process for 2.5 seconds */
            -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }

        /* Animations to fade the snackbar in and out */
        @-webkit-keyframes fadein {
            from {
                bottom: 0;
                opacity: 0;
            }
            to {
                bottom: 30px;
                opacity: 1;
            }
        }

        @keyframes fadein {
            from {
                bottom: 0;
                opacity: 0;
            }
            to {
                bottom: 30px;
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeout {
            from {
                bottom: 30px;
                opacity: 1;
            }
            to {
                bottom: 0;
                opacity: 0;
            }
        }

        @keyframes fadeout {
            from {
                bottom: 30px;
                opacity: 1;
            }
            to {
                bottom: 0;
                opacity: 0;
            }
        }
    </style>
    <title>Gestion Devices</title>
</head>
<body>

<div class="container">
    <!-- Encadré "Porte" -->
    <div class="side-boxes">
        <div class="box" id="boxDoor">
            <h2>Porte</h2>
            <button class="btn" id="btnDoor">Ouvrir</button>
        </div>

        <!-- Encadré "Lumière" -->
        <div class="box" id="boxLight">
            <h2>Lumière</h2>
            <button class="btn" id="btnLight">Allumer</button>
        </div>
    </div>

    <div class="box" id="boxMain">
        <div class="variable-container">
            <!-- Hygrométrie -->
            <div class="variable-box" id="humidityBox">
                <p>Hygrométrie: <span id="humidity">{{humidity}}</span></p>
            </div>

            <!-- Température -->
            <div class="variable-box" id="temperatureBox">
                <p>Température: <span id="temperature">{{temperature}}</span></p>
            </div>

            <!-- Pression -->
            <div class="variable-box" id="pressureBox">
                <p>Pression: <span id="pressure"></span>{{pressure}}</p>
            </div>

            <button class="btn" id="btnGetVariables">GetVariables()</button>

            <div id="snackbar">Mouvement detecté</div>

        </div>
    </div>
</div>
</div>

<script src="/socket.io/socket.io.js"></script>

<script>

    const socket = io();

    function showToast() {
        console.log("showToast")
        var x = document.getElementById("snackbar");
        x.className = "show";
        setTimeout(function () {
            x.className = x.className.replace("show", "");
        }, 5000);
    }

    socket.on('motionDetected', function (data) {
        console.log(data + " motion");
        showToast();
    });

    const boxDoor = document.getElementById('boxDoor');
    const btnDoor = document.getElementById('btnDoor');
    const btnGetVariables = document.getElementById('btnGetVariables');

    let isOpenDoor = false;



    btnDoor.addEventListener('click', function () {
        isOpenDoor = !isOpenDoor;
        if (isOpenDoor) {
            boxDoor.style.backgroundColor = '#e0f7fa';
            btnDoor.textContent = 'Fermer';
            btnDoor.classList.remove('open');
            btnDoor.classList.add('closed');

            // Ajoutez cette requête fetch pour appeler l'API
            fetch('/control/toggleDoor', {method: 'POST'})
                    .then(response => response.text())
                    .catch((error) => {
                        console.error('Error:', error);
                    });
        } else {
            boxDoor.style.backgroundColor = '';
            btnDoor.textContent = 'Ouvrir';
            btnDoor.classList.remove('closed');
            btnDoor.classList.add('open');

            // Ajoutez cette requête fetch pour appeler l'API
            fetch('/control/toggleDoor', {method: 'POST'})
                    .then(response => response.text())
                    .catch((error) => {
                        console.error('Error:', error);
                    });
        }
    });

    btnGetVariables.addEventListener('click', function () {
        window.location.reload();
    });

    const boxLight = document.getElementById('boxLight');
    const btnLight = document.getElementById('btnLight');

    let isLightOn = false;

    btnLight.addEventListener('click', function () {
        isLightOn = !isLightOn;
        if (isLightOn) {
            boxLight.style.backgroundColor = '#e0f7fa';
            btnLight.textContent = 'Éteindre';
            btnLight.classList.remove('open');
            btnLight.classList.add('closed');

            // Ajoutez cette requête fetch pour appeler l'API
            fetch('/control/toggleLight', {method: 'POST'})
                    .then(response => response.text())
                    .catch((error) => {
                        console.error('Error:', error);
                    });
        } else {
            boxLight.style.backgroundColor = '';
            btnLight.textContent = 'Allumer';
            btnLight.classList.remove('closed');
            btnLight.classList.add('open');

            // Ajoutez cette requête fetch pour appeler l'API
            fetch('/control/toggleLight', {method: 'POST'})
                    .then(response => response.text())
                    .catch((error) => {
                        console.error('Error:', error);
                    });
        }
    });


</script>

</body>
</html>